#!/usr/bin/env ruby
require 'optparse'

require 'rubygems'
require 'ether_ping'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] destination_mac"
  
  opts.on('-e', '--interface ETH', 'Ethernet interface name, e.g. eth0') do |e|
    options[:interface] = e
  end
  
  opts.on('-t', '--type TYPE',
          'Ethernet II frame type, as 2 hex bytes, e.g. 0800 for IP') do |p|
    options[:ether_type] = [p].pack('H*').unpack('n').first
  end
  
  opts.on('-d', '--data HEXBYTES',
          'Ping packet data, in a sequence of hexadecimal bytes') do |d|
    options[:data] = [d].pack('H*')
  end
  
  opts.on('-s', '--size SIZE', 'Number of bytes in a ping packet') do |s|
    options[:size] = s.to_i
  end
  
  opts.on('-i', '--interval SECONDS', 'Time between successive pings') do |i|
    options[:interval] = i.to_f
  end

  opts.on('-x', '--timeout SECONDS', 'Time before giving up on a ping') do |x|
    options[:timeout] = x.to_f
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

parser.parse!
options[:interface] ||= Ethernet.devices.keys.sort.first
options[:ether_type] ||= 0x88B5
options[:size] ||= 64 unless options[:data]
options[:interval] ||= 1
options[:timeout] ||= 1

if ARGV.length < 1
  puts "Missing destination MAC address"
  exit 1
end
destination_mac = ARGV.first

print "Pinging #{destination_mac} on #{options[:interface]} "
print "with a #{options[:size] || options[:data].length}-byte frame "
print "of type #{'%04X' % options[:ether_type]}\n"

client = EtherPing::Client.new options[:interface], options[:ether_type],
                               destination_mac

loop do
  print "Ping... "
  STDOUT.flush
  result = client.ping options[:size] || options[:data], options[:timeout]
  if result
    if result.kind_of? Numeric
      puts "#{result * 1000000}us"
    else
      puts "Failed"
      puts "Expected:\n#{result.first.unpack('H*').first}"
      puts "Received:\n#{result.last.unpack('H*').last}"
    end
  else
    puts "Timed out"
  end
  STDOUT.flush
  sleep options[:interval]
end
